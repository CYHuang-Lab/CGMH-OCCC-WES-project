return(seg.cn)
})
res <- 5*1000000
seg.cn <- lapply(paste0("chr",1:22), function(x){
seg.chr <- subset(seg, chromosome == x)
max.bin <- ceiling(max(seg.chr$end.pos)/res)
seg.bin <- seq(0, res*max.bin, res)
seg.cn <- lapply(1:max.bin, function(x){
df1 <- subset(seg.chr, start.pos > seg.bin[x] & end.pos <= seg.bin[x+1])
df2 <- subset(seg.chr, start.pos <= seg.bin[x] & end.pos > seg.bin[x+1])
if(nrow(df2)>0){
df2$start.pos <- seg.bin[x]
df2$end.pos <- seg.bin[x+1]
}
df3 <- subset(seg.chr, start.pos <= seg.bin[x] & end.pos > seg.bin[x] & end.pos <= seg.bin[x+1])
if(nrow(df3)>0){
df3$start.pos <- seg.bin[x]
}
df4 <- subset(seg.chr, start.pos > seg.bin[x] & start.pos <= seg.bin[x+1] & end.pos > seg.bin[x+1])
if(nrow(df4)>0){
df4$end.pos <- seg.bin[x+1]
}
df <- rbind(df1, df2, df3, df4)
if(nrow(df)>0){
CNa.sum <- (sum(df$CNa*(df$end.pos-df$start.pos))/sum(df$end.pos-df$start.pos)) %>%
round()
CNb.sum <- (sum(df$CNb*(df$end.pos-df$start.pos))/sum(df$end.pos-df$start.pos)) %>%
round()
CNt.sum <- CNa.sum + CNb.sum
} else{
CNa.sum <- NA
CNb.sum <- NA
CNt.sum <- NA
}
df <- data.frame(START = seg.bin[x]+1, END = seg.bin[x+1],
CNa.sum = CNa.sum, CNb.sum = CNb.sum, CNt.sum = CNt.sum)
return(df)
})
seg.cn <- do.call("rbind", seg.cn)
seg.cn$CHR <- x
return(seg.cn)
})
seg.cn <- do.call("rbind",seg.cn)
View(seg.cn)
setwd("C:/Users/youngerh/My Documents/GitHub/CGMH-OCCC-WES-project/")
### summarize CNV at 5MB resolution using sequenza output
seg.reader <- function(OCCC.ID, res.mb = 5){
cat(paste("Reading SCNA segments :", OCCC.ID, "\n"))
res <- res.mb*1000000
seg <- subset(OCCC.seg, ID == OCCC.ID)
ctm <- read.delim("ext_data_GRCh38p7_region.tsv")
## This function will exclude centromere regions from downstream analysis
seg.nc <- lapply(paste0("chr",1:22), function(x){
seg.chr <- subset(seg, chromosome == x)
df1 <- subset(seg.chr, end.pos <= ctm$centromere_start[ctm$chr==x])
df2 <- subset(seg.chr, start.pos > ctm$centromere_end[ctm$chr==x])
df3 <- subset(seg.chr, start.pos <= ctm$centromere_start[ctm$chr==x] &
end.pos > ctm$centromere_start[ctm$chr==x] &
end.pos <= ctm$centromere_end[ctm$chr==x])
if(nrow(df3)>0){
df3$end.pos <- ctm$centromere_start[ctm$chr==x]
}
df4 <- subset(seg.chr, end.pos > ctm$centromere_end[ctm$chr==x] &
start.pos > ctm$centromere_start[ctm$chr==x] &
start.pos <= ctm$centromere_end[ctm$chr==x])
if(nrow(df4)>0){
df4$start.pos <- ctm$centromere_end[ctm$chr==x]
}
df5 <- subset(seg.chr, start.pos <= ctm$centromere_start[ctm$chr==x] &
end.pos > ctm$centromere_end[ctm$chr==x])
if(nrow(df5)>0){
df5 <- df5[c(1,1),]
df5$end.pos[1] <- ctm$centromere_start[ctm$chr==x]
df5$start.pos[2] <- ctm$centromere_end[ctm$chr==x]
}
df <- rbind(df1,df2,df3,df4,df5) %>% arrange(start.pos)
return(df)
})
seg <- do.call("rbind", seg.nc)
seg.cn <- lapply(paste0("chr",1:22), function(x){
seg.chr <- subset(seg, chromosome == x)
max.bin <- ceiling(max(seg.chr$end.pos)/res)
seg.bin <- seq(0, res*max.bin, res)
seg.cn <- lapply(1:max.bin, function(x){
df1 <- subset(seg.chr, start.pos > seg.bin[x] & end.pos <= seg.bin[x+1])
df2 <- subset(seg.chr, start.pos <= seg.bin[x] & end.pos > seg.bin[x+1])
if(nrow(df2)>0){
df2$start.pos <- seg.bin[x]
df2$end.pos <- seg.bin[x+1]
}
df3 <- subset(seg.chr, start.pos <= seg.bin[x] & end.pos > seg.bin[x] & end.pos <= seg.bin[x+1])
if(nrow(df3)>0){
df3$start.pos <- seg.bin[x]
}
df4 <- subset(seg.chr, start.pos > seg.bin[x] & start.pos <= seg.bin[x+1] & end.pos > seg.bin[x+1])
if(nrow(df4)>0){
df4$end.pos <- seg.bin[x+1]
}
df <- rbind(df1, df2, df3, df4)
if(nrow(df)>0){
CNa.sum <- (sum(df$CNa*(df$end.pos-df$start.pos))/sum(df$end.pos-df$start.pos)) %>%
round()
CNb.sum <- (sum(df$CNb*(df$end.pos-df$start.pos))/sum(df$end.pos-df$start.pos)) %>%
round()
CNt.sum <- CNa.sum + CNb.sum
} else{
CNa.sum <- NA
CNb.sum <- NA
CNt.sum <- NA
}
df <- data.frame(START = seg.bin[x]+1, END = seg.bin[x+1],
CNa.sum = CNa.sum, CNb.sum = CNb.sum, CNt.sum = CNt.sum)
return(df)
})
seg.cn <- do.call("rbind", seg.cn)
seg.cn$CHR <- x
return(seg.cn)
})
seg.cn <- do.call("rbind",seg.cn)
seg.cn$ID <- OCCC.ID
return(seg.cn)
}
OCCC.seg.binned <- lapply(unique(OCCC.seg$ID)[1:10], seg.reader)
OCCC.seg.binned <- do.call("rbind", OCCC.seg.binned)
OCCC.seg.binned <- left_join(
OCCC.seg.binned, OCCC.table[,c("ID","BG.ploidy")], by = "ID") %>%
mutate(CNV = CNt.sum - BG.ploidy,
START = as.integer(START), END = as.integer(END)) %>%
mutate(SEG = str_glue("{CHR}:{START}-{END}")) %>%
dplyr::select(ID, CHR, START, END, SEG, starts_with("CN"), BG.ploidy)
OCCC.seg.binned$CNa.sum[is.nan(OCCC.seg.binned$CNa.sum)] <- NA
OCCC.seg.binned$CNb.sum[is.nan(OCCC.seg.binned$CNb.sum)] <- NA
OCCC.seg.binned$CNt.sum[is.nan(OCCC.seg.binned$CNt.sum)] <- NA
OCCC.seg.binned$CNV[is.nan(OCCC.seg.binned$CNV)] <- NA
OCCC.seg.binned <- mutate(OCCC.seg.binned, CNV.status = case_when(
!is.na(CNt.sum) & CNa.sum == 0 & CNb.sum == 0 ~ "CN.del",
!is.na(CNt.sum) & CNa.sum > 0 & CNV == 1 & CNb.sum > 0 ~ "CN1.gain.het",
!is.na(CNt.sum) & CNa.sum > 0 & CNV == 1 & CNb.sum == 0 ~ "CN1.gain.loh",
!is.na(CNt.sum) & CNa.sum > 0 & CNV >= 2 & CNb.sum > 0 ~ "CN2.gain.het",
!is.na(CNt.sum) & CNa.sum > 0 & CNV >= 2 & CNb.sum == 0 ~ "CN2.gain.loh",
!is.na(CNt.sum) & CNa.sum > 0 & CNV == -1 & CNb.sum > 0 ~ "CN1.loss.het",
!is.na(CNt.sum) & CNa.sum > 0 & CNV == -1 & CNb.sum == 0 ~ "CN1.loss.loh",
!is.na(CNt.sum) & CNa.sum > 0 & CNV <= -2 & CNb.sum > 0 ~ "CN2.loss.het",
!is.na(CNt.sum) & CNa.sum > 0 & CNV <= -2 & CNb.sum == 0 ~ "CN2.loss.loh",
!is.na(CNt.sum) & CNa.sum > 0 & CNV == 0 & CNb.sum == 0 ~ "CN0.loh",
!is.na(CNt.sum) & CNa.sum > 0 & CNV == 0 & CNb.sum > 0 ~ "CN.neutral",
TRUE ~ "Unknown"
))
CNV.sum <- data.frame(SEG = unique(OCCC.seg.binned$SEG)) %>%
separate(col = "SEG", into = c("CHR","RANGE"), sep = ":", remove = F) %>%
separate(col = "RANGE", into = c("START","END"), sep = "-", remove = F, convert = T)
CNV.sum <- rbind(CNV.sum, data.frame(
SEG = paste0("chr",1:22,".space1"), CHR = paste0("chr",1:22), RANGE = NA,
START = max(CNV.sum$START) + 1, END = NA)) %>%
rbind(data.frame(
SEG = paste0("chr",1:22,".space2"), CHR = paste0("chr",1:22), RANGE = NA,
START = max(CNV.sum$START) + 2, END = NA)) %>%
mutate(CHR = factor(CHR, levels = paste0("chr",1:22))) %>% arrange(CHR, START)
CNV.sum$pos <- 1:nrow(CNV.sum)
plot.chr <- group_by(CNV.sum, CHR) %>%
summarize(width = length(CHR), break.start = min(pos)-1, break.end = max(pos)) %>%
mutate(pos = break.end-0.5*width)
CNV.gain <- count(OCCC.seg.binned, SEG, CNV.status) %>%
separate(col = "SEG", into = c("CHR","RANGE"), sep = ":", remove = F) %>%
separate(col = "RANGE", into = c("START","END"), sep = "-", remove = F, convert = T) %>%
mutate(CHR = factor(CHR, levels = paste0("chr",1:22))) %>%
subset(str_detect(CNV.status, "gain")) %>%
arrange(CHR, START) %>%
mutate(CNV.status = factor(CNV.status, levels = c("CN2.gain.loh","CN2.gain.het",
"CN1.gain.loh","CN1.gain.het")),
SEG = factor(SEG, levels = unique(CNV.sum$SEG)))
View(CNV.gain)
CNV.gain <- left_join(CNV.gain, CNV.sum[,c("SEG","pos")], by = "SEG")
CNV.loss <- count(OCCC.seg.binned, SEG, CNV.status) %>%
separate(col = "SEG", into = c("CHR","RANGE"), sep = ":", remove = F) %>%
separate(col = "RANGE", into = c("START","END"), sep = "-", remove = F, convert = T) %>%
mutate(CHR = factor(CHR, levels = paste0("chr",1:22))) %>%
subset(str_detect(CNV.status, "loss|CN0|del")) %>%
arrange(CHR, START) %>%
mutate(CNV.status = factor(CNV.status, levels = c("CN.del","CN2.loss.loh","CN2.loss.het",
"CN1.loss.loh","CN1.loss.het","CN0.loh")),
SEG = factor(SEG, levels = unique(CNV.sum$SEG)))
CNV.loss <- left_join(CNV.loss, CNV.sum[,c("SEG","pos")], by = "SEG")
ggplot(CNV.gain) +
geom_rect(data=plot.chr, mapping=aes(xmin=break.start, xmax=break.end, ymin=0, ymax=80),
fill = rep(c("gray90","white"),11)) +
geom_hline(yintercept = seq(0,60,20), color = "gray80", size=0.25) +
geom_col(aes(x=pos, y=100*n/105, fill=CNV.status), width=1, show.legend = F) +
geom_segment(x=0, xend = 20, y = 70, yend = 70, color = "black", size = 1) +
geom_text(x=10, y=72, label="100MB", size = 4) +
scale_x_continuous(breaks = c(0,plot.chr$break.end), minor_breaks = NULL, labels = NULL) +
theme_void() + theme(axis.title = element_blank()) +
scale_fill_manual(values = c("CN2.gain.loh"="red3","CN2.gain.het"="salmon1",
"CN1.gain.loh"="sienna","CN1.gain.het"="tan1"))
n_distinct(OCCC.seg$ID)
ggplot(CNV.gain) +
geom_rect(data=plot.chr, mapping=aes(xmin=break.start, xmax=break.end, ymin=0, ymax=80),
fill = rep(c("gray90","white"),11)) +
geom_hline(yintercept = seq(0,60,20), color = "gray80", size=0.25) +
geom_col(aes(x=pos, y=100*n/10, fill=CNV.status), width=1, show.legend = F) +
geom_segment(x=0, xend = 20, y = 70, yend = 70, color = "black", size = 1) +
geom_text(x=10, y=72, label="100MB", size = 4) +
scale_x_continuous(breaks = c(0,plot.chr$break.end), minor_breaks = NULL, labels = NULL) +
theme_void() + theme(axis.title = element_blank()) +
scale_fill_manual(values = c("CN2.gain.loh"="red3","CN2.gain.het"="salmon1",
"CN1.gain.loh"="sienna","CN1.gain.het"="tan1"))
ggplot(plot.chr) +
geom_rect(aes(xmin=break.start, xmax=break.end, ymin=0, ymax=1),
fill = rep(c("gray80","white"),11), color="black") +
geom_text(aes(x=pos, y=0.5, label=1:22), size = 4) +
theme_void()
ggplot(CNV.loss) +
geom_rect(data=plot.chr, mapping=aes(xmin=break.start, xmax=break.end, ymin=0, ymax=-80),
fill = rep(c("gray90","white"),11)) +
geom_hline(yintercept = c(0,-20,-40), color = "gray80", size=0.25) +
geom_col(aes(x=pos, y=-100*n/n_distinct(OCCC.seg$ID), fill=CNV.status), width=1, show.legend = F) +
scale_x_continuous(breaks = c(0,plot.chr$break.end), minor_breaks = NULL, labels = NULL) +
theme_void() + theme(axis.title = element_blank()) +
scale_fill_manual(values = c("CN2.loss.loh"="steelblue4","CN2.loss.het"="steelblue1",
"CN1.loss.loh"="limegreen","CN1.loss.het"="palegreen",
"CN0.loh"="gray50", "CN.del"="darkviolet"))
## perform consensus clustering
library(ConsensusClusterPlus)
library(ComplexHeatmap)
colnames(OCCC.seqz)
colnames(OCCC.seg.binned)
## perform consensus clustering
OCCC.SCNA <- OCCC.seg.binned[,c("ID","SEG","CNV")] %>% spread(SEG, CNV, fill=0)
OCCC.SCNA <- OCCC.seg.binned[,c("ID","SEG","CNV")] %>% spread(SEG, CNV, fill=0)
rownames(OCCC.SCNA) <- OCCC.SCNA[,1]
OCCC.SCNA <- OCCC.SCNA[,-1]
View(OCCC.SCNA)
CNV.sum$SEG
colnames(OCCC.table)
OCCC.table$MS.Group
## perform consensus clustering
OCCC.SCNA <- OCCC.seg.binned[,c("ID","SEG","CNV")] %>% spread(SEG, CNV, fill=0)
rownames(OCCC.SCNA) <- OCCC.SCNA[,1]
OCCC.SCNA <- OCCC.SCNA[,-1]
cluster.results <- ConsensusClusterPlus::ConsensusClusterPlus(
d = t(OCCC.SCNA),
maxK = 6,
reps = 10000,
pItem = 0.8,
pFeature = 1,
title = "./cluster.km",
clusterAlg = "km",
distance = "euclidean",
seed = 1220)
View(OCCC.SCNA)
CNV.sum$SEG
OCCC.mut <- read.delim("CGMH-OCCC-WES.maf")
View(OCCC.mut)
OCCC.seg <- read.csv("CGMH-OCCC-SCNA-segment.csv")
OCCC.mut <- read.delim("CGMH-OCCC-WES.maf")
OCCC.table <- read.csv("CGMH-OCCC-table.csv")
colnames(OCCC.mut)
mut.cat <- subset(OCCC.mut, Tumor_Sample_Barcode == OCCC.ID)
mut.cat <- subset(OCCC.mut, Tumor_Sample_Barcode == "OCCC-043") %>%
subset(Chromosome %in% 1:22) %>%
separate(col = "Otherinfo.13", into = c("GT","AD","AF","DP"), sep = ":", remove = F, convert = T) %>%
mutate(Alt_c = as.numeric(str_extract(AD, "\\d*$"))) %>%
mutate(Ref_c = DP - Alt_c)
View(OCCC.table)
OCCC.table$CCF[OCCC.table$ID == "OCCC-043"]
OCCC.table$Tumor.ploidy[OCCC.table$ID == "OCCC-043"]
OCCC.table$GD.status[OCCC.table$ID == "OCCC-043"]
View(OCCC.seg)
View(OCCC.mut)
header <- readLines("Data_vcf_header.txt")
if(nrow(mut.cat)>0){
vcf.tmp <- data.frame(
Chr=mut.cat$Chromosome, Start=mut.cat$Start_Position, ID = ".",
Ref=mut.cat$Reference_Allele, Alt=mut.cat$Tumor_Seq_Allele2,
Qual = ".", FILTER = "PASSED",
info = paste0("t_alt_count=",mut.cat$Alt_c,";t_ref_count=",mut.cat$Ref_c),
Format = "AD:DP", Sample = paste0(".,",mut.cat$Alt_c,":",mut.cat$DP)
)
header <- readLines("Data_vcf_header.txt")
cat(header, file = tmp.path, sep = "\n")
write.table(vcf.tmp[,1:10], file = tmp.path, append = T, quote = F, sep = "\t", row.names = F, col.names = F)
vcf <- readVcf(tmp.path)
unlink(tmp.path)
gr <- GRanges(Rle(c(seg$chromosome)), IRanges(start = seg$start.pos, end = seg$end.pos),
major_cn=as.integer(seg$A), minor_cn=as.integer(seg$B),
clonal_frequency=purity)
### running mutationTimer package
clusters <- data.frame(cluster = 1:2, proportion = purity*c(1, 0.5), n_ssms=c(90,10))
mt <- mutationTime(vcf = vcf, cn = gr, isWgd = WGD, n.boot=1000, clusters = clusters)
vcf <- addMutTime(vcf, mt$V)
vcf.mut.timing <- info(vcf) %>% data.frame()
vcf.mut.timing <- mutate(vcf.mut.timing, mutation = rownames(vcf.mut.timing), ID = ID,
WGD = WGD, purity = purity, ploidy = ploidy)
annovar <- mutate(annovar, mutation = str_glue("{Chr}:{Start}_{Ref}/{Alt}"))
vcf.mut.timing <- left_join(vcf.mut.timing,
dplyr::select(annovar,mutation,Gene.ensGene,Func.ensGene,
ExonicFunc.ensGene,AF,DP,seq.range),
by = "mutation") %>%
arrange(CLS, desc(AF))
#mcols(gr) <- cbind(mcols(gr), mt$T)
#plotSample(vcf,gr)
}
vcf.tmp <- data.frame(
Chr=mut.cat$Chromosome, Start=mut.cat$Start_Position, ID = ".",
Ref=mut.cat$Reference_Allele, Alt=mut.cat$Tumor_Seq_Allele2,
Qual = ".", FILTER = "PASSED",
info = paste0("t_alt_count=",mut.cat$Alt_c,";t_ref_count=",mut.cat$Ref_c),
Format = "AD:DP", Sample = paste0(".,",mut.cat$Alt_c,":",mut.cat$DP)
)
View(vcf.tmp)
tmp.path <- paste0("OCCC-043",".temp.vcf")
cat(header, file = tmp.path, sep = "\n")
write.table(vcf.tmp, file = tmp.path, append = T, quote = F, sep = "\t",
row.names = F, col.names = F)
vcf <- readVcf(tmp.path)
vcf <- MutationTimeR::readVcf(tmp.path)
#devtools::install_github("gerstung-lab/MutationTimeR")
library(MutationTimeR)
vcf <- MutationTimeR::readVcf(tmp.path)
gr <- GRanges(Rle(c(seg$chromosome)), IRanges(start = seg$start.pos, end = seg$end.pos),
major_cn=as.integer(seg$A), minor_cn=as.integer(seg$B),
clonal_frequency=purity)
seg <- subset(OCCC.seg, ID == "OCCC-043")
seg$chromosome <- sub("chr","",seg$chromosome)
## for gene mutations with no available CN estimation, use a average CN at arm level
mut.cat$seq.range <- sapply(1:nrow(mut.cat), function(x){
df <- subset(seg, chromosome == mut.cat$Chr & start.pos < mut.cat$Start & end.pos > mut.cat$End)
ifelse(nrow(df)>0, "yes", "no")
})
mut.cat.arm <- subset(mut.cat, seq.range == "no")
mut.cat <- subset(mut.cat, seq.range == "yes")
gr <- GRanges(Rle(c(seg$chromosome)), IRanges(start = seg$start.pos, end = seg$end.pos),
major_cn=as.integer(seg$A), minor_cn=as.integer(seg$B),
clonal_frequency=purity)
OCCC.ID <- "OCCC-043"
gr <- GRanges(Rle(c(seg$chromosome)), IRanges(start = seg$start.pos, end = seg$end.pos),
major_cn=as.integer(seg$A), minor_cn=as.integer(seg$B),
clonal_frequency=purity)
purity <- OCCC.table$CCF[OCCC.table$ID == OCCC.ID]
ploidy <- OCCC.table$Tumor.ploidy[OCCC.table$ID == OCCC.ID]
WGD <- ifelse(OCCC.table$GD.status[OCCC.table$ID == OCCC.ID] == "GD", TRUE, FALSE)
gr <- GRanges(Rle(c(seg$chromosome)), IRanges(start = seg$start.pos, end = seg$end.pos),
major_cn=as.integer(seg$A), minor_cn=as.integer(seg$B),
clonal_frequency=purity)
gr <- GRanges(Rle(c(seg$chromosome)), IRanges(start = seg$start.pos, end = seg$end.pos),
major_cn=as.integer(seg$CNa), minor_cn=as.integer(seg$CNb),
clonal_frequency=purity)
### running mutationTimer package
clusters <- data.frame(cluster = 1:2, proportion = purity*c(1, 0.5), n_ssms=c(90,10))
mt <- mutationTime(vcf = vcf, cn = gr, isWgd = WGD, n.boot=1000, clusters = clusters)
vcf <- addMutTime(vcf, mt$V)
vcf.mut.timing <- info(vcf) %>% data.frame()
View(vcf.mut.timing)
vcf.mut.timing <- mutate(vcf.mut.timing, mutation = rownames(vcf.mut.timing), ID = OCCC.ID,
WGD = WGD, purity = purity, ploidy = ploidy)
View(mut.cat)
colnames(mut.cat)
mut.cat <- mutate(
mut.cat,
mutation = str_glue("{Chromosome}:{Start_Position}_{Reference_Allele}/{Tumor_Seq_Allele2}")
)
View(mut.cat)
vcf.mut.timing <- left_join(vcf.mut.timing,
dplyr::select(mut.cat,mutation,Hugo_Symbol,AF,DP,seq.range),
by = "mutation") %>%
arrange(CLS, desc(AF))
View(mut.cat)
View(mut.cat)
seg.arm <- seg
CNV.region <- read.delim("Data_GRCh38p7_region.tsv")
CNV.region$chr
seg.arm$chromosome
seg.arm <- subset(OCCC.seg, ID == OCCC.ID)
seg.arm$chromosome <- sapply(1:nrow(seg.arm), function(x){
arm <- ifelse(seg.arm$start.pos[x] < CNV.region$centromere_start[CNV.region$chr == seg.arm$chromosome[x]],
"", ".5")
return(paste0(seg.arm$chromosome[x],arm))
})
View(seg.arm)
tmp <- lapply(unique(seg.arm$chromosome), function(x){
df <- subset(seg.arm, chromosome == x)
seg.chr <- data.frame(chromosome = x, start.pos = min(df$start.pos), end.pos = max(df$end.pos),
major_CN = round(sum(df$CNa*(df$end.pos-df$start.pos))/sum(df$end.pos-df$start.pos, digits = 0)),
minor_CN = round(sum(df$CNb*(df$end.pos-df$start.pos))/sum(df$end.pos-df$start.pos, digits = 0)))
return(seg.chr)
})
View(tmp)
tmp <- do.call("rbind", tmp)
gr.arm <- GRanges(Rle(c(tmp$chromosome)),
IRanges(start = tmp$start.pos, end = tmp$end.pos),
major_cn=as.integer(tmp$major_CN), minor_cn=as.integer(tmp$minor_CN),
clonal_frequency=purity)
OCCC.mut.timing <- lapply(unique(OCCC.table$ID)[1], mut.timing)
### time the somatic mutation alone with the SCNA status using MutationTimeR package
mut.timing <- function(OCCC.ID){
cat(paste("Timing gene mutation for", OCCC.ID, "\n"))
tmp.path <- paste0(OCCC.ID,".temp.vcf")
mut.cat <- subset(OCCC.mut, Tumor_Sample_Barcode == OCCC.ID) %>%
subset(Chromosome %in% 1:22) %>%
separate(col = "Otherinfo.13", into = c("GT","AD","AF","DP"), sep = ":", remove = F, convert = T) %>%
mutate(Alt_c = as.numeric(str_extract(AD, "\\d*$"))) %>%
mutate(Ref_c = DP - Alt_c)
purity <- OCCC.table$CCF[OCCC.table$ID == OCCC.ID]
ploidy <- OCCC.table$Tumor.ploidy[OCCC.table$ID == OCCC.ID]
WGD <- ifelse(OCCC.table$GD.status[OCCC.table$ID == OCCC.ID] == "GD", TRUE, FALSE)
seg <- subset(OCCC.seg, ID == OCCC.ID)
seg$chromosome <- sub("chr","",seg$chromosome)
## for gene mutations with no available CN estimation, use a average CN at arm level
mut.cat$seq.range <- sapply(1:nrow(mut.cat), function(x){
df <- subset(seg, chromosome == mut.cat$Chr & start.pos < mut.cat$Start & end.pos > mut.cat$End)
ifelse(nrow(df)>0, "yes", "no")
})
mut.cat.arm <- subset(mut.cat, seq.range == "no")
mut.cat <- subset(mut.cat, seq.range == "yes")
cat(paste("Number of gene mut included:", nrow(mut.cat),"\n"))
cat(paste("Number of gene mut not in sequenza range:", nrow(mut.cat.arm),"\n"))
cat(paste("Estimated purity:", purity, "\n"))
cat(paste("Estimated ploidy:", round(ploidy, digits = 2),"\n"))
cat(paste("Set WGD to", WGD, "\n\n"))
if(nrow(mut.cat)>0){
vcf.tmp <- data.frame(
Chr=mut.cat$Chromosome, Start=mut.cat$Start_Position, ID = ".",
Ref=mut.cat$Reference_Allele, Alt=mut.cat$Tumor_Seq_Allele2,
Qual = ".", FILTER = "PASSED",
info = paste0("t_alt_count=",mut.cat$Alt_c,";t_ref_count=",mut.cat$Ref_c),
Format = "AD:DP", Sample = paste0(".,",mut.cat$Alt_c,":",mut.cat$DP)
)
header <- readLines("Data_vcf_header.txt")
cat(header, file = tmp.path, sep = "\n")
write.table(vcf.tmp, file = tmp.path, append = T, quote = F, sep = "\t",
row.names = F, col.names = F)
vcf <- MutationTimeR::readVcf(tmp.path)
unlink(tmp.path)
gr <- GRanges(Rle(c(seg$chromosome)), IRanges(start = seg$start.pos, end = seg$end.pos),
major_cn=as.integer(seg$CNa), minor_cn=as.integer(seg$CNb),
clonal_frequency=purity)
### running mutationTimer package
clusters <- data.frame(cluster = 1:2, proportion = purity*c(1, 0.5), n_ssms=c(90,10))
mt <- mutationTime(vcf = vcf, cn = gr, isWgd = WGD, n.boot=1000, clusters = clusters)
vcf <- addMutTime(vcf, mt$V)
vcf.mut.timing <- info(vcf) %>% data.frame()
vcf.mut.timing <- mutate(vcf.mut.timing, mutation = rownames(vcf.mut.timing), ID = OCCC.ID,
WGD = WGD, purity = purity, ploidy = ploidy)
mut.cat <- mutate(
mut.cat,
mutation = str_glue("{Chromosome}:{Start_Position}_{Reference_Allele}/{Tumor_Seq_Allele2}")
)
vcf.mut.timing <- left_join(
vcf.mut.timing,
dplyr::select(mut.cat,mutation,Hugo_Symbol,Variant_Classification,AF,DP,seq.range),
by = "mutation") %>% arrange(CLS, desc(AF))
}
### summarize SCNA seg to arm levels if some gene mutations have no CN estimation
if(nrow(mut.cat.arm)>0){
CNV.region <- read.delim("Data_GRCh38p7_region.tsv")
seg.arm <- subset(OCCC.seg, ID == OCCC.ID)
seg.arm$chromosome <- sapply(1:nrow(seg.arm), function(x){
arm <- ifelse(seg.arm$start.pos[x] < CNV.region$centromere_start[CNV.region$chr == seg.arm$chromosome[x]],
"", ".5")
return(paste0(seg.arm$chromosome[x],arm))
})
tmp <- lapply(unique(seg.arm$chromosome), function(x){
df <- subset(seg.arm, chromosome == x)
seg.chr <- data.frame(chromosome = x, start.pos = min(df$start.pos), end.pos = max(df$end.pos),
major_CN = round(sum(df$CNa*(df$end.pos-df$start.pos))/sum(df$end.pos-df$start.pos, digits = 0)),
minor_CN = round(sum(df$CNb*(df$end.pos-df$start.pos))/sum(df$end.pos-df$start.pos, digits = 0)))
return(seg.chr)
})
tmp <- do.call("rbind", tmp)
tmp$chromosome <- sub("\\.5","",tmp$chromosome) %>% sub(pattern = "chr", replacement = "")
gr.arm <- GRanges(Rle(c(tmp$chromosome)),
IRanges(start = tmp$start.pos, end = tmp$end.pos),
major_cn=as.integer(tmp$major_CN), minor_cn=as.integer(tmp$minor_CN),
clonal_frequency=purity)
vcf.tmp <- data.frame(Chr=mut.cat.arm$Chromosome, Start=mut.cat.arm$Start_Position, ID = ".",
Ref=mut.cat.arm$Reference_Allele, Alt=mut.cat.arm$Tumor_Seq_Allele2,
Qual = ".", FILTER = "PASSED",
info = paste0("t_alt_count=",mut.cat.arm$Alt_c,";t_ref_count=",mut.cat.arm$Ref_c),
Format = "AD:DP", Sample = paste0(".,",mut.cat.arm$Alt_c,":",mut.cat.arm$DP))
header <- readLines("Data_vcf_header.txt")
cat(header, file = tmp.path, sep = "\n")
write.table(vcf.tmp, file = tmp.path, append = T, quote = F, sep = "\t",
row.names = F, col.names = F)
vcf.arm <- readVcf(tmp.path)
unlink(tmp.path)
clusters.arm <- data.frame(cluster = 1:2, proportion = purity*c(1, 0.5), n_ssms=c(90,10))
mt.arm <- mutationTime(vcf = vcf.arm, cn = gr.arm, isWgd = WGD, n.boot=1000,
clusters = clusters.arm)
vcf.arm <- addMutTime(vcf.arm, mt.arm$V)
vcf.arm.timing <- info(vcf.arm) %>% data.frame()
vcf.arm.timing <- mutate(vcf.arm.timing, mutation = rownames(vcf.arm.timing), ID = OCCC.ID,
WGD = WGD, purity = purity, ploidy = ploidy)
mut.cat.arm <- mutate(
mut.cat.arm,
mutation = str_glue("{Chromosome}:{Start_Position}_{Reference_Allele}/{Tumor_Seq_Allele2}"))
vcf.arm.timing <- left_join(vcf.arm.timing,
dplyr::select(mut.cat.arm,mutation,Hugo_Symbol,
Variant_Classification,AF,DP,seq.range),
by = "mutation") %>% arrange(CLS, desc(AF))
}
if(nrow(mut.cat)>0 & nrow(mut.cat.arm)>0){
vcf.mut.timing <- rbind(vcf.mut.timing, vcf.arm.timing) %>% arrange(CLS, desc(AF))
return(vcf.mut.timing)
} else if(nrow(mut.cat)>0 & nrow(mut.cat.arm)==0) {
return(vcf.mut.timing)
} else if(nrow(annovar)==0 & nrow(annovar.arm)>0) {
return(vcf.arm.timing)
}
}
OCCC.mut.timing <- lapply(unique(OCCC.table$ID)[1], mut.timing)
OCCC.mut.timing <- do.call("rbind", OCCC.mut.timing)
View(OCCC.mut.timing)
